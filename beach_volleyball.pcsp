// Game states 
//       A           B
// +-----+-----+-----+-----+
// |     |     ‖     |     |
// |  1  |  3  ‖  5  |  7  |
// |     |     ‖     |     |
// |-----|-----‖-----|-----|
// |     |     ‖     |     |
// |  2  |  4  ‖  6  |  8  |
// |     |     ‖     |     |
// +-----+-----+-----+-----+

// Player states
// Team A - A1 (Taylor Sander) A2 (Taylor Crabb)
// Team B - B1 (Phil Dalhausser) B2 (Casey Patterson)
//-----------------------------------------------------------------------------------VARIABLES------------------------------------------------------------------------------------------------
enum{grid_one, grid_two, grid_three, grid_four, grid_five, grid_six, grid_seven, grid_eight, out_of_court};

// Game rules
#define team_A 1;
#define team_B 2;
#define na 0;
#define max_total_sets 3;
#define max_total_pts 5;
#define max_total_pts_last_set 5;
#define winning_set_lead 0;
#define max_deuce_pts 35;

hvar team_A1_player_pos = grid_two;
hvar team_A2_player_pos = grid_one;
hvar team_B1_player_pos = grid_eight;
hvar team_B2_player_pos = grid_seven;
hvar ball_pos = 0;
hvar set_num = 1;
var team_A_set_score = 0;
var team_B_set_score = 0;
var team_A_game_score = 0;
var team_B_game_score = 0;
var turnToServe = na;
hvar checkAPlayerServe = 1; // 1 means Team A player 1 serve, 0 means  Team A player 2 serve
hvar checkBPlayerServe = 1; // 1 means Team B player 1 serve, 0 means  Team B player 2 serve
hvar gameWon = na;
hvar firstBall = 1; // subsequent actions after dig serve will have firstBall = 0, reset to 1 on new rally

//-----------------------------------------------------------------------------------SCORING SYSTEM------------------------------------------------------------------------------------------------

BeachVolleyBallGame = WhoServe1st; (TeamAServeNewSet [] TeamBServeNewSet);

// Only used for first serve of the set, will use turn = team A or B based on coin toss
WhoServe1st = []i:{team_A,team_B}@ TossCoin{turnToServe = i} -> Skip;

TeamAServeNewSet = [gameWon == na && turnToServe == team_A && checkAPlayerServe==1]Team_A_Player_1_Serve -> TeamAPlayer1Serve
				   []
				   [gameWon == na && turnToServe == team_A && checkAPlayerServe==0]Team_A_Player_2_Serve -> TeamAPlayer2Serve;
TeamBServeNewSet = [gameWon == na && turnToServe == team_B  && checkBPlayerServe==1]Team_B_Player_1_Serve -> TeamBPlayer1Serve
				   []
				   [gameWon == na && turnToServe == team_B  && checkBPlayerServe==0]Team_B_Player_2_Serve ->TeamBPlayer2Serve;

TeamAPlayer1Serve = A1_serve{ball_pos = grid_one; team_A2_player_pos = grid_three; team_A1_player_pos = grid_one; team_B1_player_pos = grid_eight; team_B2_player_pos = grid_seven;} 
        			-> Serve_A_Player1;
TeamAPlayer2Serve = A2_serve{ball_pos = grid_one; team_A2_player_pos = grid_one; team_A1_player_pos = grid_one; team_B1_player_pos = grid_eight; team_B2_player_pos = grid_seven;} 
        			-> Serve_A_Player2;
TeamBPlayer1Serve = B1_serve{ball_pos = grid_seven; team_B2_player_pos = grid_six; team_B1_player_pos = grid_seven; team_A1_player_pos = grid_one; team_A2_player_pos = grid_two;} 
        			-> Serve_B_Player1;
TeamBPlayer2Serve = B2_serve{ball_pos = grid_seven; team_B2_player_pos = grid_seven; team_B1_player_pos = grid_seven; team_A1_player_pos = grid_one; team_A2_player_pos = grid_two;} 
        			-> Serve_B_Player2;
        
TeamAServe = [gameWon == na && checkAPlayerServe==1]Team_A_Player_1_Serve -> TeamAPlayer1Serve
		   	 []
			 [gameWon == na && checkAPlayerServe==0]Team_A_Player_2_Serve -> TeamAPlayer2Serve;
TeamBServe = [gameWon == na  && checkBPlayerServe==1]Team_B_Player_1_Serve -> TeamBPlayer1Serve
			 []
			 [gameWon == na  && checkBPlayerServe==0]Team_B_Player_2_Serve ->TeamBPlayer2Serve;
        
#define team_A_win_game gameWon == team_A;
#define team_B_win_game gameWon == team_B;

// First and Second set to 21 points
// Third set, if required, to 15 points
// Deuce will have a cap to 35 points
// In actual game, there is no cap to deuce points but it is used in modelling to ensure deadlock free
//(team_A_set_score == max_deuce_pts) || 
#define team_A_win_set (team_A_set_score == max_deuce_pts) || (team_A_set_score >= team_B_set_score + winning_set_lead && 
	((set_num == max_total_sets && team_A_set_score >= max_total_pts_last_set) ||
	(team_A_set_score >= max_total_pts)));
#define team_B_win_set (team_B_set_score == max_deuce_pts) || (team_B_set_score >= team_A_set_score + winning_set_lead && 
	((set_num == max_total_sets && team_B_set_score >= max_total_pts_last_set) ||
	(team_B_set_score >= max_total_pts)));

New_Set = updateGameScore{if (team_A_win_set) { team_A_game_score++ } else {team_B_game_score++ }}
	-> resetScore{team_A_set_score=0; team_B_set_score=0;}
	-> incrementSet{set_num++}
	-> checkForWin{if (team_A_game_score == 2) { gameWon = team_A } else if (team_B_game_score == 2) { gameWon = team_B } }
	-> if(gameWon == na){TeamAServeNewSet [] TeamBServeNewSet};

Increment_Team_A_Set_Score = increment{team_A_set_score++; firstBall = 1; if (turnToServe==team_B){turnToServe=team_A;if(checkAPlayerServe==1){checkAPlayerServe=0}else{checkAPlayerServe=1}}} -> if (team_A_win_set) {New_Set} else {TeamAServe};
Increment_Team_B_Set_Score = increment{team_B_set_score++; firstBall = 1; if (turnToServe==team_A){turnToServe=team_B;if(checkBPlayerServe==1){checkBPlayerServe=0}else{checkBPlayerServe=1}}} -> if (team_B_win_set) {New_Set} else {TeamBServe};

//-----------------------------------------------------------------------------------SERVE------------------------------------------------------------------------------------------------

Serve_A_Player1 = pcase {
    5: Serve_short_diagonal{ball_pos = grid_five; team_A1_player_pos = grid_two;} -> DigB
    32: Serve_long_diagonal{ball_pos = grid_seven; team_A1_player_pos = grid_two;} -> DigB
    12: Serve_short_straight{ball_pos = grid_six; team_A1_player_pos = grid_one;} -> DigB
    21: Serve_long_straight{ball_pos = grid_eight; team_A1_player_pos = grid_one;} -> DigB
    30: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Serve_A_Player2 = pcase {
    12: Serve_short_diagonal{ball_pos = grid_six; team_A2_player_pos = grid_four;} -> DigB
    26: Serve_long_diagonal{ball_pos = grid_eight; team_A2_player_pos = grid_four;} -> DigB
    14: Serve_short_straight{ball_pos = grid_five; team_A2_player_pos = grid_three;} -> DigB
    22: Serve_long_straight{ball_pos = grid_seven; team_A2_player_pos = grid_three;} -> DigB
    26: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Serve_B_Player1 = pcase {
    8: Serve_short_diagonal{ball_pos = grid_three; team_B1_player_pos = grid_eight;} -> DigA
    28: Serve_long_diagonal{ball_pos = grid_one; team_B1_player_pos = grid_eight;} -> DigA
    14: Serve_short_straight{ball_pos = grid_four; team_B1_player_pos = grid_seven;} -> DigA
    22: Serve_long_straight{ball_pos = grid_two; team_B1_player_pos = grid_seven;} -> DigA
    28: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

Serve_B_Player2 = pcase {
    10: Serve_short_diagonal{ball_pos = grid_four; team_B2_player_pos = grid_six;} -> DigA
    22: Serve_long_diagonal{ball_pos = grid_two; team_B2_player_pos = grid_six;} -> DigA
    12: Serve_short_straight{ball_pos = grid_three; team_B2_player_pos = grid_five;} -> DigA
    37: Serve_long_straight{ball_pos = grid_one; team_B2_player_pos = grid_five;} -> DigA
    19: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

// We split dig into dig serve and dig spike as we made the assmumption that only 1 player will
// be digging the spike and 1 player will always block. This happens usually in the case of a real game.

//-----------------------------------------------------------------------------------DIG------------------------------------------------------------------------------------------------

DigA =  [firstBall == 1 && (ball_pos == grid_one || ball_pos == grid_three)]Team_A_has_ball -> DigServe_A_Player1[]
		[firstBall == 1 && (ball_pos == grid_two || ball_pos == grid_four)]Team_A_has_ball -> DigServe_A_Player2[]
		[firstBall == 0]Team_A_Receive_Attack -> DigAttack_A_Player1;

DigB =  [firstBall == 1 && (ball_pos == grid_five|| ball_pos == grid_seven)]Team_B_has_ball -> DigServe_B_Player2[]
		[firstBall == 1 && (ball_pos == grid_six || ball_pos == grid_eight)]Team_B_has_ball -> DigServe_B_Player1[]
		[firstBall == 0]Team_B_Receive_Attack -> DigAttack_B_Player1;



//-----------------------------------------------------------------------------------DIG SERVE------------------------------------------------------------------------------------------------

DigServe_A_Player1 = pcase {
    21: Dig_serve_beside{if(ball_pos == grid_one) {team_A1_player_pos = ball_pos; ball_pos = grid_two; firstBall = 0;} 
            else if (ball_pos == grid_three) {team_A1_player_pos = ball_pos; ball_pos = grid_four; firstBall = 0;}}
            -> Set_A_Player_2
    26: Dig_serve_diagonal{if(ball_pos == grid_one) {team_A1_player_pos = ball_pos; ball_pos = grid_four; firstBall = 0;} 
            else if (ball_pos == grid_three) {team_A1_player_pos = ball_pos; ball_pos = grid_two; firstBall = 0;}}
            -> Set_A_Player_2
    11: Dig_serve_upwards{if(ball_pos == grid_one) {team_A1_player_pos = ball_pos; ball_pos = grid_one; firstBall = 0;} 
            else if (ball_pos == grid_three) {team_A1_player_pos = ball_pos; ball_pos = grid_three; firstBall = 0;}}
            -> Set_A_Player_2 
    18: Dig_serve_front_backward{if(ball_pos == grid_one) {team_A1_player_pos = ball_pos; ball_pos = grid_three; firstBall = 0;} 
    	else if (ball_pos == grid_three) {team_A1_player_pos = ball_pos; ball_pos = grid_one; firstBall = 0;}} -> Set_A_Player_2
    24: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

DigServe_A_Player2 = pcase {
    20: Dig_serve_beside{if(ball_pos == grid_two) {team_A2_player_pos = ball_pos; ball_pos = grid_one; firstBall = 0;} 
            else if (ball_pos == grid_four) {team_A2_player_pos = ball_pos; ball_pos = grid_three; firstBall = 0;}}
            -> Set_A_Player_1
   	23: Dig_serve_diagonal{if(ball_pos == grid_two) {team_A2_player_pos = ball_pos; ball_pos = grid_three; firstBall = 0;} 
            else if (ball_pos == grid_four) {team_A2_player_pos = ball_pos; ball_pos = grid_one; firstBall = 0;}}
            -> Set_A_Player_1
    10: Dig_serve_upwards{if(ball_pos == grid_two) {team_A2_player_pos = ball_pos; ball_pos = grid_two; firstBall = 0;} 
            else if (ball_pos == grid_four) {team_A2_player_pos = ball_pos; ball_pos = grid_four; firstBall = 0;}}
            -> Set_A_Player_1 
    21: Dig_serve_front_backward{if(ball_pos == grid_two) {team_A2_player_pos = ball_pos; ball_pos = grid_four; firstBall = 0;}
    	else if (ball_pos == grid_four) {team_A2_player_pos = ball_pos; ball_pos = grid_two; firstBall = 0;}} -> Set_A_Player_1
    26: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

DigServe_B_Player1 = pcase {
    28: Dig_serve_beside{if(ball_pos == grid_eight) {team_B1_player_pos = ball_pos; ball_pos = grid_seven; firstBall = 0;} 
            else if (ball_pos == grid_six) {team_B1_player_pos = ball_pos; ball_pos = grid_five; firstBall = 0;}}
            -> Set_B_Player_2
    29: Dig_serve_diagonal{if(ball_pos == grid_eight) {team_B1_player_pos = ball_pos; ball_pos = grid_five; firstBall = 0;} 
            else if (ball_pos == grid_six) {team_B1_player_pos = ball_pos; ball_pos = grid_seven; firstBall = 0;}}
            -> Set_B_Player_2
    8: Dig_serve_upwards{if(ball_pos == grid_eight) {team_B1_player_pos = ball_pos; ball_pos = grid_eight; firstBall = 0;} 
            else if (ball_pos == grid_six) {team_B1_player_pos = ball_pos; ball_pos = grid_six; firstBall = 0;}}
            -> Set_B_Player_2 
    14: Dig_serve_front_backward{if(ball_pos == grid_eight) {team_B1_player_pos = ball_pos; ball_pos = grid_six; firstBall = 0;}
    	else if (ball_pos == grid_six)  {team_B1_player_pos = ball_pos; ball_pos = grid_eight; firstBall = 0;}} -> Set_B_Player_2
    21: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

DigServe_B_Player2 = pcase {
    30: Dig_serve_beside{if(ball_pos == grid_seven) {team_B2_player_pos = ball_pos; ball_pos = grid_eight; firstBall = 0;} 
            else if (ball_pos == grid_five) {team_B1_player_pos = ball_pos; ball_pos = grid_six; firstBall = 0;}}
            -> Set_B_Player_1
    21: Dig_serve_diagonal{if(ball_pos == grid_seven) {team_B2_player_pos = ball_pos; ball_pos = grid_six; firstBall = 0;} 
            else if (ball_pos == grid_five) {team_B2_player_pos = ball_pos; ball_pos = grid_eight; firstBall = 0;}}
            -> Set_B_Player_1
    13: Dig_serve_upwards{if(ball_pos == grid_seven) {team_B2_player_pos = ball_pos; ball_pos = grid_seven; firstBall = 0;} 
            else if (ball_pos == grid_five) {team_B2_player_pos = ball_pos; ball_pos = grid_five; firstBall = 0;}}
            -> Set_B_Player_1 
    13: Dig_serve_front_backward{if(ball_pos == grid_seven) {team_B2_player_pos = ball_pos; ball_pos = grid_five; firstBall = 0;}
    	else if (ball_pos == grid_five) {team_B2_player_pos = ball_pos; ball_pos = grid_seven; firstBall = 0;}} -> Set_B_Player_1
    23: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

//-----------------------------------------------------------------------------------DIG SPIKE ------------------------------------------------------------------------------------------------
DigAttack_A_Player1 = pcase {
    21: Dig_spike_beside{if( ball_pos == grid_one) {team_A1_player_pos = ball_pos; ball_pos = grid_two;}
            else if (ball_pos == grid_two) {team_A1_player_pos = ball_pos; ball_pos = grid_one;}
            else if (ball_pos == grid_three) {team_A1_player_pos = ball_pos; ball_pos = grid_four;}
            else if (ball_pos == grid_four) {team_A1_player_pos = ball_pos; ball_pos = grid_three;}}
            -> Set_A_Player_2
    27: Dig_spike_diagonal{if(ball_pos == grid_one) {team_A1_player_pos = ball_pos; ball_pos = grid_four;} 
            else if (ball_pos == grid_two) {team_A1_player_pos = ball_pos; ball_pos = grid_three;}
            else if (ball_pos == grid_three) {team_A1_player_pos = ball_pos; ball_pos = grid_two;}
            else if (ball_pos == grid_four) {team_A1_player_pos = ball_pos; ball_pos = grid_one;}}
            -> Set_A_Player_2
    8: Dig_spike_front_backwards{if(ball_pos == grid_one) {team_A1_player_pos = ball_pos; ball_pos = grid_three;}
    		else if(ball_pos == grid_two) {team_A1_player_pos = ball_pos; ball_pos = grid_four;}
    		else if(ball_pos == grid_three) {team_A1_player_pos = ball_pos; ball_pos = grid_one;}
    		else if(ball_pos == grid_four) {team_A1_player_pos = ball_pos; ball_pos = grid_two;}
    		} -> Set_A_Player_2
    4: Dig_spike_upwards{if(ball_pos == grid_one || ball_pos == grid_two || ball_pos == grid_three|| ball_pos == grid_four ) {team_A1_player_pos = ball_pos; ball_pos = ball_pos;}} 
            -> Set_A_Player_2
    40: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
}; 


DigAttack_B_Player1 = pcase {
    19: Dig_spike_beside{if(ball_pos == grid_five) {team_B1_player_pos = ball_pos; ball_pos = grid_six;} 
            else if (ball_pos == grid_six) {team_B1_player_pos = ball_pos; ball_pos = grid_five;}
            else if (ball_pos == grid_seven) {team_B1_player_pos = ball_pos; ball_pos = grid_eight;}
            else if (ball_pos == grid_eight) {team_B1_player_pos = ball_pos; ball_pos = grid_seven;}}
            -> Set_B_Player_2
    28: Dig_spike_diagonal{if(ball_pos == grid_five) {team_B1_player_pos = ball_pos; ball_pos = grid_eight;} 
            else if (ball_pos == grid_six) {team_B1_player_pos = ball_pos; ball_pos = grid_seven;}
            else if (ball_pos == grid_seven) {team_B1_player_pos = ball_pos; ball_pos = grid_six;}
            else if (ball_pos == grid_eight) {team_B1_player_pos = ball_pos; ball_pos = grid_five;}}
            -> Set_B_Player_2
    10: Dig_spike_front_backwards{if(ball_pos == grid_seven) {team_B1_player_pos = ball_pos; ball_pos = grid_five;}
    		else if(ball_pos == grid_eight) {team_B1_player_pos = ball_pos; ball_pos = grid_six;}
    		else if(ball_pos == grid_five) {team_B1_player_pos = ball_pos; ball_pos = grid_seven;}
    		else if(ball_pos == grid_six) {team_B1_player_pos = ball_pos; ball_pos = grid_eight;}
    		} -> Set_B_Player_2
    5: Dig_spike_upwards{if(ball_pos == grid_five || ball_pos == grid_six || ball_pos == grid_seven || ball_pos == grid_eight) {team_B1_player_pos = ball_pos; ball_pos = ball_pos;}} 
            -> Set_B_Player_2
   	38: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
}; 



//-----------------------------------------------------------------------------------SET------------------------------------------------------------------------------------------------
Set_A_Player_1 = pcase {
	96: Set_Forward{if(team_A2_player_pos == grid_three || team_A2_player_pos == grid_one){team_A1_player_pos = ball_pos; ball_pos = grid_three; team_A2_player_pos = grid_three;} 
			else if (team_A2_player_pos == grid_two || team_A2_player_pos == grid_four) {team_A1_player_pos = ball_pos; ball_pos = grid_four; team_A2_player_pos = grid_four;}} -> Attack_A_Player_2
    4: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};
Set_A_Player_2 = pcase {
	98: Set_Forward{if(team_A1_player_pos == grid_three || team_A1_player_pos == grid_one){team_A2_player_pos = ball_pos; ball_pos = grid_three; team_A1_player_pos = grid_three;} 
			else if (team_A1_player_pos == grid_two || team_A1_player_pos == grid_four) {team_A2_player_pos = ball_pos; ball_pos = grid_four; team_A1_player_pos = grid_four;}} -> Attack_A_Player_1
    2: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};
Set_B_Player_1 = pcase {
    100: Set_Forward{if(team_B2_player_pos == grid_seven || team_B2_player_pos == grid_five){team_B1_player_pos = ball_pos; ball_pos = grid_five; team_B2_player_pos = grid_five} 
    		else if (team_B2_player_pos == grid_six || team_B2_player_pos == grid_eight) {team_B1_player_pos = ball_pos; ball_pos = grid_six; team_B2_player_pos = grid_six;}} -> Attack_B_Player_2
    0: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};
Set_B_Player_2 = pcase {
    95: Set_Forward{if(team_B1_player_pos == grid_seven || team_B1_player_pos == grid_five){team_B2_player_pos = ball_pos; ball_pos = grid_five; team_B1_player_pos = grid_five} 
    		else if (team_B1_player_pos == grid_six || team_B1_player_pos == grid_eight) {team_B2_player_pos = ball_pos; ball_pos = grid_six; team_B1_player_pos = grid_six;}} -> Attack_B_Player_1
    5: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

// Attack process is just for decision making for the attacker, no change in ball_pos or player position should be done here
//-----------------------------------------------------------------------------------ATTACK ------------------------------------------------------------------------------------------------
Attack_A_Player_1 = pcase {
    64: Spike -> Spike_A_Player_1
    20: Roll -> Roll_A_Player_1
    16: Cut -> Cut_A_Player_1
};

Attack_A_Player_2 = pcase {
    34: Spike -> Spike_A_Player_2
    34: Roll -> Roll_A_Player_2
    32: Cut -> Cut_A_Player_2
};

Attack_B_Player_1 = pcase {
    52: Spike -> Spike_B_Player_1
    25: Roll -> Roll_B_Player_1
    23: Cut -> Cut_B_Player_1
};

Attack_B_Player_2 = pcase {
    54: Spike -> Spike_B_Player_2
    27: Roll -> Cut_B_Player_2
    19: Cut -> Cut_B_Player_2
};

// assumption: gets blocked directly infront instead of diagonal court (although the spike intended to be diagonal)
// if spike is not blocked, then the back opponent will dig (assume diagonal court for full game extensibility)

Spike_A_Player_1 = pcase {
    25: gets_blocked{if(ball_pos == grid_three) {ball_pos = grid_five;}
    		else if (ball_pos == grid_four) { ball_pos = grid_six;}} -> Block_B_Player2
    25: gets_digged{if (ball_pos == grid_three) { ball_pos = grid_eight;}
    		else if (ball_pos == grid_four) { ball_pos = grid_seven;}} -> DigB
    20: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Roll_A_Player_1 = pcase {
	25: gets_blocked{if(ball_pos == grid_three) {ball_pos = grid_five;}
    		else if (ball_pos == grid_four) { ball_pos = grid_six;}} -> Block_B_Player2
    25: gets_digged{if (ball_pos == grid_three) { ball_pos = grid_seven;}
    		else if (ball_pos == grid_four) { ball_pos = grid_eight;}} -> DigB
	50: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Cut_A_Player_1 = pcase {
	25: gets_blocked{if(ball_pos == grid_three) {ball_pos = grid_five;}
    		else if (ball_pos == grid_four) { ball_pos = grid_six;}} -> Block_B_Player2
    25: gets_digged{if (ball_pos == grid_three) { ball_pos = grid_six;}
    		else if (ball_pos == grid_four) { ball_pos = grid_five;}} -> DigB
    50: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Spike_A_Player_2 = pcase {
    25: gets_blocked{if(ball_pos == grid_three) {ball_pos = grid_five;}
    		else if (ball_pos == grid_four) { ball_pos = grid_six;}} -> Block_B_Player2
    25: gets_digged{if (ball_pos == grid_three) { ball_pos = grid_eight;}
    		else if (ball_pos == grid_four) { ball_pos = grid_seven;}} -> DigB
    50: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Roll_A_Player_2 = pcase {
	25: gets_blocked{if(ball_pos == grid_three) {ball_pos = grid_five;}
    		else if (ball_pos == grid_four) { ball_pos = grid_six;}} -> Block_B_Player2
    25: gets_digged{if (ball_pos == grid_three) { ball_pos = grid_seven;}
    		else if (ball_pos == grid_four) { ball_pos = grid_eight;}} -> DigB
	50: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Cut_A_Player_2 = pcase {
	25: gets_blocked{if(ball_pos == grid_three) {ball_pos = grid_five;}
    		else if (ball_pos == grid_four) { ball_pos = grid_six;}} -> Block_B_Player2
    25: gets_digged{if (ball_pos == grid_three) { ball_pos = grid_six;}
    		else if (ball_pos == grid_four) { ball_pos = grid_five;}} -> DigB
    50: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Spike_B_Player_1 = pcase {
    25: gets_blocked{if(ball_pos == grid_five) { ball_pos = grid_three;}
    		else if (ball_pos == grid_six) { ball_pos = grid_four;}} -> Block_A_Player2
    25: gets_digged{if (ball_pos == grid_five) { ball_pos = grid_two;}
    		else if (ball_pos == grid_six) { ball_pos = grid_one;}} -> DigA
    50: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

Roll_B_Player_1 = pcase {
	25: gets_blocked{if(ball_pos == grid_five) { ball_pos = grid_three;}
    		else if (ball_pos == grid_six) { ball_pos = grid_four;}} -> Block_A_Player2
    25: gets_digged{if (ball_pos == grid_five) { ball_pos = grid_one;}
    		else if (ball_pos == grid_six) { ball_pos = grid_two;}} -> DigA
    50: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

Cut_B_Player_1 = pcase {
	25: gets_blocked{if(ball_pos == grid_five) { ball_pos = grid_three;}
    		else if (ball_pos == grid_six) { ball_pos = grid_four;}} -> Block_A_Player2
    25: gets_digged{if (ball_pos == grid_five) { ball_pos = grid_four;}
    		else if (ball_pos == grid_six) { ball_pos = grid_three;}} -> DigA
    50: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

Spike_B_Player_2 = pcase {
    25: gets_blocked{if(ball_pos == grid_five) { ball_pos = grid_three;}
    		else if (ball_pos == grid_six) { ball_pos = grid_four;}} -> Block_A_Player2
    25: gets_digged{if (ball_pos == grid_five) { ball_pos = grid_two;}
    		else if (ball_pos == grid_six) { ball_pos = grid_one;}} -> DigA
    50: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

Roll_B_Player_2 = pcase {
	25: gets_blocked{if(ball_pos == grid_five) { ball_pos = grid_three;}
    		else if (ball_pos == grid_six) { ball_pos = grid_four;}} -> Block_A_Player2
    25: gets_digged{if (ball_pos == grid_five) { ball_pos = grid_one;}
    		else if (ball_pos == grid_six) { ball_pos = grid_two;}} -> DigA
    50: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

Cut_B_Player_2 = pcase {
	25: gets_blocked{if(ball_pos == grid_five) { ball_pos = grid_three;}
    		else if (ball_pos == grid_six) { ball_pos = grid_four;}} -> Block_A_Player2
    25: gets_digged{if (ball_pos == grid_five) { ball_pos = grid_four;}
    		else if (ball_pos == grid_six) { ball_pos = grid_three;}} -> DigA
    50: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

//-----------------------------------------------------------------------------------BLOCK ------------------------------------------------------------------------------------------------
Block_A_Player2 = pcase {
    36: Block_short_straight{if (ball_pos == grid_three) {team_A2_player_pos = ball_pos; ball_pos = grid_five;}
    		else if (ball_pos == grid_four) {team_A2_player_pos = ball_pos; ball_pos = grid_six;}} -> DigB
    13: Block_long_straight{if (ball_pos == grid_three) {team_A2_player_pos = ball_pos; ball_pos = grid_seven;}
    		else if (ball_pos == grid_four) {team_A2_player_pos = ball_pos; ball_pos = grid_eight;}} -> DigB
    12: Block_short_diagonal{if (ball_pos == grid_three) {team_A2_player_pos = ball_pos; ball_pos = grid_six;}
    		else if (ball_pos == grid_four) {team_A2_player_pos = ball_pos; ball_pos = grid_five;}} -> DigB
    7: Block_long_diagonal{if (ball_pos == grid_three) {team_A2_player_pos = ball_pos; ball_pos = grid_eight;}
    		else if (ball_pos == grid_four) {team_A2_player_pos = ball_pos; ball_pos = grid_seven;}} -> DigB 
    32: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
}; 

Block_B_Player2 = pcase {
    32: Block_short_straight{if (ball_pos == grid_five) {team_B2_player_pos = ball_pos; ball_pos = grid_three;}
    		else if (ball_pos == grid_six) {team_B2_player_pos = ball_pos; ball_pos = grid_four;}} -> DigA
    12: Block_long_straight{if (ball_pos == grid_five) {team_B2_player_pos = ball_pos; ball_pos = grid_one;}
    		else if (ball_pos == grid_six) {team_B1_player_pos = ball_pos; ball_pos = grid_two;}} -> DigA
    19: Block_short_diagonal{if (ball_pos == grid_five) {team_B2_player_pos = ball_pos; ball_pos = grid_four;}
    		else if (ball_pos == grid_six) {team_B1_player_pos = ball_pos; ball_pos = grid_three;}} -> DigA
    10: Block_long_diagonal{if (ball_pos == grid_five) {team_B2_player_pos = ball_pos; ball_pos = grid_two;}
    		else if (ball_pos == grid_six) {team_B1_player_pos = ball_pos; ball_pos = grid_one;}} -> DigA
    27: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

// deadlock check
#assert BeachVolleyBallGame deadlockfree;

// only 1 team can win the game
#assert BeachVolleyBallGame |= []<>(team_A_win_game -> !team_B_win_game);
#assert BeachVolleyBallGame |= []<>(team_B_win_game -> !team_A_win_game);

// score will never go beyond max points, including deuce
#define scoreLessThanDeucePoints (team_A_game_score <= max_deuce_pts) && (team_B_game_score <= max_deuce_pts);
#assert BeachVolleyBallGame |= []scoreLessThanDeucePoints;

// numbers of sets will never go beyond 3, set number less than 4 (as it starts from 1)
#define setsLessThanThree ((team_A_game_score + team_B_game_score) <= 3) && set_num <= 4;
#assert BeachVolleyBallGame |= []setsLessThanThree;

// whenever game score is updated, it implies that the ball must be out of court (fault occurred)
#define ballOutOfCourt ball_pos == out_of_court;
#assert BeachVolleyBallGame |= [](updateGameScore -> ballOutOfCourt);

// should be close to 50-50 as points per match increase
#assert BeachVolleyBallGame reaches team_A_win_game with prob;
#assert BeachVolleyBallGame reaches team_B_win_game with prob;

// should not be valid as we flip a coin that results in 2 different initial states
#assert BeachVolleyBallGame deterministic;

// realistically a game should always eventually end, but in our model
// there is no limit in a single rally which can possibly cause infinitely long rally
#assert BeachVolleyBallGame |= []<>(team_A_win_game || team_B_win_game);
