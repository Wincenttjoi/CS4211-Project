// Game states

//    A    B
// -----+-----+
// |    ‖     |
// | 3  ‖  5  |
// |    ‖     |
// |----‖-----|
// |    ‖     |
// | 4  ‖  6  |
// |    ‖     |
// -----+-----+

enum{grid_one, grid_two, grid_three, grid_four, grid_five, grid_six, grid_seven, grid_eight}

var team_A1_player_pos = grid_three;
var team_B1_player_pos = grid_six;
var ball_pos = 0;
var set_num = 1;
var team_A_set_score = 0;
var team_B_set_score = 0;
var team_A_game_score = 0;
var team_B_game_score = 0;
var turn = na; 
var won = na;

// Game rules
#define team_A 1;
#define team_B 2;
#define max_total_sets 3;
#define max_total_pts 21;
#define max_total_pts_last_set 15;
#define winning_set_lead 2;
#define max_touch 3; // dig -> set -> spike (common sequence)
#define out_of_court -1;

BeachVolleyBallGame = WhoServe1st; (TeamAServe [] TeamB_Serve);

WhoServe1st = []i:{team_A,team_B}@ TossCoin{turn = i} -> Skip;
TeamAServe = [won == na && turn == team_A]Team_A_has_ball -> Serve_A;
TeamBServe = [won == na && turn == team_B]Team_B_has_ball -> Serve_B;

#define team_A_win_game team_A_game_score == 2;
#define team_B_win_game team_B_game_score == 2;
#define team_A_win_set team_A_set_score >= team_B_set_score + 2 && 
	((set_num == 3 && team_A_set_score >= max_total_pts_last_set) ||
	(team_A_set_score >= max_total_pts));
#define team_B_win_set team_B_set_score >= team_A_set_score + 2 && 
	((set_num == 3 && team_B_set_score >= max_total_pts_last_set) ||
	(team_B_set_score >= max_total_pts));
	
New_Set = updateGameScore{if (team_A_win_set) { team_A_game_score++ } else {team_B_game_score++ }}
	-> resetScore{team_A_set_score=0; team_B_set_score=0;}
	-> incrementSet{set_num++}
	-> checkForWin{if (team_A_win_game) { won = teamA } else if (team_B_win_game) { won = teamB } }
	-> (TeamAServe [] TeamB_Serve);

Increment_Team_A_Set_Score = increment{team_A_set_score++} -> if (team_A_win_set) {New_Set} else {TeamBServe};
Increment_Team_B_Set_Score = increment{team_B_set_score++} -> if (team_B_win_set) {New_Set} else {TeamAServe};

Serve_A = pcase {
    90: Serve_in{ball_pos = grid_five} -> Dig_B(grid_five)
    10: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Dig_A(ball_pos) = pcase {
    90: Dig_success{if(ball_pos == grid_three) {team_B1_player_pos = ball_pos; grid_pos = grid_four} 
    	else if (ball_pos == grid_four) {team_B1_player_pos = ball_pos; grid_pos = grid_three}}
    	-> Set_B(grid_pos)
    10: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};


Set_A = pcase {
    90: Set_success{} -> Attack_A
    10: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Attack_A = pcase {
    100: Spike{} -> Spike_A
    // to expand with rollshot, cutshot etc
};

Spike_A = pcase {
    75: Block_B{} -> Block_B
    25: Dig_B{} -> Dig_B
    10: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Block_A = pcase {
    90: Block_success{} -> Next_Pt
    10: Fault{ball_pos = out_of_court} -> Increment_Team_B_Set_Score
};

Serve_B = pcase {
    90: Serve_in{ball_pos = } -> Dig_A
    10: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

Dig_B(ball_pos) = pcase {
    90: Dig_success{if(ball_pos == grid_five) {team_B1_player_pos = ball_pos; grid_pos = grid_six} 
    	else if (ball_pos == grid_six) {team_B1_player_pos = ball_pos; grid_pos = grid_five}}
    	-> Set_B(grid_pos)
    10: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};


Set_B(grid_pos) = pcase {
    90: Set_success{ball_pos = grid_pos; team_B1_player_pos = grid_pos} -> Attack_B
    10: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

Attack_B = pcase {
    100: Spike{} -> Spike_B
    // to expand with rollshot, cutshot etc
};

Spike_B = pcase {
    75: Block_A{} -> Block_A
    25: Dig_A{} -> Dig_A
    10: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};

Block_B = pcase {
    90: Block_success{} -> Next_Pt
    10: Fault{ball_pos = out_of_court} -> Increment_Team_A_Set_Score
};